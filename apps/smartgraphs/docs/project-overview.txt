included files

 style.css
 raphael-plus-g.raphael.js
 (were these files included in the right way?)
 (are the css rules right? Is there anything in the view that should go in the css instead?)
 

main.js

  (appends mainPage.mainPane)
  
  queries store for DataSeries 'series-1'
  queries store for Axes '1'
  sets dataController.content to dataseries record's 'points' property // (is this the right way to do it?)
  sets axesController.content to 'axes' record itself
  
  
models

  DataPoint
    series
    x
    y
    
  DataSeries
    points

  Axes
    xMax
    xMin
    yMax
    yMin
    xScale  (not used?)
    yScale  (not used?)
    

controllers

  axesController
    padding
  dataSeriesController
    totalChanges       // incremented whenever changes are made to objects in content
    content
    arrangedObjects
    _valuesDidChange()    // the observer on 
    _arrayDidChange().observes('.[]')   // fires whenever array changes; binds '_valuesDidChange' observer to change in
      *y* value (only) of DataPoints in content

views

  mainPage.mainPane
    layout is 960x720  //(so, itshould fit in 1024x768!)
 
   textView: Smartgraphs.HTMLView
     layout         // (explicit left, top, width, height to fit in top left)
     classNames 'smartgraph-pane'
     html (static string of html that is displayed)
   
   bottomLeftView:  SC.LabelView
     layout: 
     classNames:
    
   graphView: Smartgraphs.RaphaelView
     layout:
     classNames: 
   
     axesView: Smartgraphs.AxesView
       xMax .. yScale bound explicitly to same-name properties on AxesController
       padding bound explicitly       
      // note that padding is defined on the CONTROLLER! (though the model clearly isn't the place for it either!)
     
     series1View: Smartgraphs.SeriesView
       xMin .. yScale bound explicitly, again, to same-name properties on AxesController
       controller bound to dataSeriesController                // used so view can call .deselectObject()
       content bound to dataSeriesController.arrangedObjects   // but series1View.content should have .deselectObject()
       selection bound to dataSeriesController.selection

    tableView: SC.CollectionView
      layout:
      classNames:
      
      labelsView: SC.CollectionView
        layout:
        xsLabel: SC.LabelView
          layout
          displayValue: 'x'
        ysLabel: SC.LabelView
          layout
          displayValue: 'y'
      
      scrollerView:
        layout
        borderSyle          //should(n't) this be in CSS?
        
        contentView: SC.CollectionView
          
          xHeight bound from xsView.height
          yHeight bound form ysView.height
          height (calculated property that depends on xHeight, yHeight)
          _heightDidChange().observes('height')      // (adjusts layout.height to new value of height
                                                     // (can layout be BOUND? Note that it's a hash, not SC.Object)
                                                     
          xsView: SC.ListView
            height (calculated property that depends on calculatedHeight, layout)
            layout
            contentValueKey = 'x'
            canEditContent = YES
            contentBinding     to dataSeriesController
            selectionBinding   to property on dataSeriesController
            
          ysView: SC.ListView
            (same as xsView)      // including def. of height property; 
                                  // how to get a variable to define this so it's accessible when design() is called?



custom views:


RaphaelView

  raphaelObject
  _childViewForId
  _lastViewForMouseMove
  
  didCreateLayer()     // this is where 'graph' div gets appended and raphael object gets appended
                       // (big q: how to resize raphael object in a way consistent with SC view resize?)
                       
  registerChildView    // needed to stash view IDs; is there a way to hook this into createChildView
                       // (big q: what is the SC view lifecycle?)
                       
  _ID_MATCHER          // ASSUMES that all SC html id's will be of the form scnnn
  _childViewForEvent() // scans e.target.id to see if it starts with 'scnnn', e.g., sc103-data-point-1, and returns
                       // view that registered scnnn
                       
  mouseMoved()         // dispatches mouseMoved to child views and creates mouseEntered, mouseExited for child views
                       // how to handle mouse leaving the view entirely? 
                       // is this inconsisten with touch UI?
                       
  mouseDown()          // dispatch to child view
  


AxesView:

  didCreateLayer()        // pushes layer to back using zIndex; IS THIS THE RIGHT WAY TO DO IT? 
  
  render()          // gets raphael object from parent view (which must be a raphaelView!)
                    // I believe this is called several times even though not all parameters are set yet
                    // but despite this, it does get called that 'one last time' so the axes get drawn!
                    
  _x                // cache of raphael object for x axis  (not explicitly represented in hash passed to extend())
  _y                // cache of raphael object for y axis
  
  //(note, no displayProperties property!)
  //(calculates plotWidth and plotHeight based on padding and size; note it doesn't rescale when layout changes)
  

SeriesView:

  _raphaelObjForId    // caches objects representing points
  _dataPointForId     // reference from DOM element id to DataPoint record
  _highlightedPoint   // raphael objects representing currently 'highlighted' (hovered) point
  
  init()              // required so it can register itself with *parent* view (note flat hierarchy implied by this)
  
  displayProperties: xMin xMax yMin yMax padding selection content content.totalChanges content.[]
                      // note that content.totalChanges works as a displayProperty!
                      
  didCreateLayer()    // again with the zIndex hack
  
  mouseDown()         // selects/deselects DataPoint represented by event.target on controller (triggers re-render)
  mouseEntered()      // adds 'highlighted' attributes to raphael object represented by event.target (no re-render!)
  mouseExited()       // removes 'highlighted' attributes from raphael object _highlightedPoint (oops on name!)

                    // oops - shouldn't 'render' method render the highlight attributes? (of course, the 
                    // data points have their own view class--in which case, they live two levels down from
                    // RaphaelView ... hmmm...)

  render()
    // re-calculates plot width and plot height using the same formulae as in AxesView
    // calculates an xScale and yScale that have nothing to do with unused, same-named properties on Axes
    // removes all raphael objects before re-drawing them!
    
    // calculates point positions without clipping
    
    // generates ids for the points by prepending its guid, in order to make event dispatching from RaphaelView work
    // adds NO_HIGHLIGHT_ATTR and then SELECTED_ATTR or NOT_SELECTED_ATTR based on selection status    




