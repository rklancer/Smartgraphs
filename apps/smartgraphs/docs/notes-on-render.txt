SC.Pane

 remember, is a View subclass
 
 this is what actually creates the layer and appends it to the dom,
 
 the various appendTo, prependTo, before, after() methods:
  * get the 'layer' property
  * call createLayer() on themselves (remember a Pane is a View) if the layer doesn't exist
  * append the layer to the dom if it's not attached(or not attached to the correct element)

 
SC.View 

prepareContext() is what calls render()
renderChildViews() walks the childviews array, pushes a tag onto the context and calls prepareContext() with the new 'sub context' .prepareContext() is what actually calls render() on the child views, and subsequently, renderChildViews()

notice that the default implementation of render() doesn't do anything unless firstTime is YES (in which case it just calls renderChildViews()) 

updateLayer() calls didUpdateLayer()
the only case I could find of didUpdateLayer() being implemented was in a Greenhouse view that uses a canvas element!


(The layer is generally created all at once, when the SC.Pane is appended)


SC.RenderContext

element() is what actually creates the dom element
update() updates innerHTML of the context, but doesn't create a new dom node  (well, except there's a setting to cause it to append a new node instead of just update the existing one, but that's to work around browser issues)

okay, great.


--- 

event handling for views
---

what happens on mousedown? SC.Event is responsible for handling it!

the magic? SC.(evt.target).view()[0] is apparently the view of the target

apparently view() is 
function () {
    return this.map(function() { 
      var ret=null, guidKey = SC.viewKey, dom = this, value;
      while(!ret && dom && (dom !== document)) {
        if (dom.nodeType===1 && (value = dom.getAttribute('id'))) ret = SC.View.views[value] ;
        dom = dom.parentNode;
      }
      dom = null;
      return ret ;
    });
  }
  
* the only two places that the SC.Views.view (global hash of views by layer ids) is set is in the init() method of the SC.View class!
* and in the CollectionView (which apparently reuses layer ids)

Event handling for CollectionViews:
---
see itemViewForEvent():
  gets the itemView for the event; given the event target, walks up the DOM till it contentIndexForLayerId(dom node id) returns something
  
so see contentIndexForLayerId():
  this expects child views' layer ids to be of the form (collectionview id)-(index)!!! e.g., 'sc462-3' is the id of the list item view for the 4th item in the list item sc462
  it pulls the index from the part after the dash and calls itemViewForContentIndex()
  
  (note this is generic for collection views)
   
  you'll want to eventually override contentIndexesInRect() to calculate nowShowing() to get proper incremental rendering of data points.
  
 the actual adding of item views to the dom occurs in collectionView.reloadIfNeeded(); it's done via the removeChild(), replaceChild(), and insertBefore() methods on the collection view or item views. (the SC.View.insertBefore() method, for example, results in SC.View.updateLayerLocation() being called, which includes code to reparent the child's layer in the DOM, creating it first if needed.



 
Okay, I think I know much of what I need to know.


* you do want child views to render to their own dom node for event handling and consistency with collectionviews
* a raphael view may be able to have a layer (but should not have updateLayerLocation(), for example)

comments?


renderChildViews() is where the default begin/end tags get created. Overriding renderChildViews() would allow a RaphaelView to avoid creating an (html) element for the layer.






notice that the renderContext() method can be overridden so that a layer creates something other than a 
